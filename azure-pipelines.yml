# PHP as Linux Web App on Azure
# Build, package and deploy your PHP project to Azure Linux Web App.
# Add steps that run tests and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/php

trigger:
- main

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: '2c8f065c-4ae5-43cc-841d-2f157036cfe5'

  # Web app name
  webAppName: 'ams-app-1'

  # Environment name
  environmentName: 'PHP-Testing'

  # Root folder under which your composer.json file is available.
  rootFolder: $(System.DefaultWorkingDirectory)
  
  # Agent pool
  agentPool: 'LocalPool'

stages:
- stage: Verify
  displayName: Verify
  jobs:
  - job: AppVerify
    pool: $(agentPool)
    steps:
    - script: |
        cp .env.deploy .env
        composer install
      workingDirectory: $(rootFolder)
      displayName: 'Install Composer packages'

    - script: vendor/bin/phpcs --standard=phpcs.xml --extensions=php
      workingDirectory: $(rootFolder)
      displayName: 'Checking coding convention'

    - script: |
        touch database/database.sqlite
        php artisan test --env=testing --log-junit report/unit.xml --coverage-cobertura report/cobertura/coverage.xml
      workingDirectory: $(rootFolder)
      displayName: 'Perform unit testing'

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/unit.xml'
        searchFolder: '$(rootFolder)/report'
        failTaskOnFailedTests: true

    - task: PublishCodeCoverageResults@1
      condition: succeededOrFailed()
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(rootFolder)/report/cobertura/coverage.xml'
        failIfCoverageEmpty: true

- stage: Build
  displayName: Build
  dependsOn: Verify
  condition: succeeded()
  jobs:
  - job: AppBuild
    pool: $(agentPool)
    steps:
    - script: |
        cp .env.deploy .env
        composer install --no-interaction --optimize-autoloader --no-dev
      workingDirectory: $(rootFolder)
      displayName: 'Install Composer packages'

    - script: |
        npm install
        npm run prod
      env:
        APP_KEY: $(APP_KEY)
        APP_URL: $(APP_URL)
      workingDirectory: $(rootFolder)
      displayName: 'Build React UI using Webpack Mix'

    - script: |
        rm -rf node_modules
        rm .env
      workingDirectory: $(rootFolder)
      displayName: 'Cleanup node_modules packages'

    - task: ArchiveFiles@2
      displayName: 'Packaging files'
      inputs:
        rootFolderOrFile: '$(rootFolder)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Publish package'
      artifact: drop

- stage: Deploy
  displayName: 'Deploy'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: WebAppDeployment
    pool: $(agentPool)
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            displayName: 'Deploy to Azure App Service'
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: '$(azureSubscription)'
              appType: 'webAppLinux'
              WebAppName: '$(webAppName)'
              packageForLinux: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              StartupCommand: 'cp /home/default /etc/nginx/sites-enabled/default && service nginx restart && php artisan optimize:clear && php artisan migrate --force'
